using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _8_Enumerations_Cheat_Sheet
{
    class Program
    {
        // По умолчанию базовым для элементов перечисления является тип "int". 
        // Но тип перечисления можно поменять, следующим образом, добавив ".... : (type)"
        enum KnowledgeScore
        {
            Microsoft = 40,
            Apple = 37,
            Intel = 10,
            IBM = 28,
            Nokia = 5
        }

        static void Main(string[] args)
        {
            int value = (int)KnowledgeScore.Nokia * 2;

            // Возможен обратный процесс присваивания текстового поля вместо целого числа. 
            // Вызов строки, которая привязана к соответствующему номеру.
            KnowledgeScore score = (KnowledgeScore)value;
            Console.WriteLine(score.ToString());
            Console.ReadKey();
        }

        // Методу .Sort() передаётся ссылка на новый объект "DuckComparer" как на параметр метода.
        // Сортировка объектов коллекции с помощью интерфейсов "IComparable<...> и "IComparer<...>" *
        // При его использовании необходимо создавать отдельный класс, а не работать внутри того, экземпляры которого задаются в коллекции!
        // В этом есть плюсы: отдельный класс для сортировки (уток) позволяет применить более сложную логику сравнения. **
        // ** Можно определять метод сортировки коллекции.

        // При помощи метода ToArray() можно преобразовать коллекцию в массив --> КАК ЭТО РАБОТАЕТ?

        // Почитать: https://ru.wikipedia.org/wiki/Операторы_в_C_и_C%2B%2B *
        // * Разница между "=" и "==": 1) равенство двух переменных (a == b);
        //                             2) присваивание одной переменной другой (a = b)


        // Интерфейс "IEnumerable" обеспечивает механизм перебора колекции (массива).

        // Ковариация (covariance) (термин для коллекций) позволяет добавлять частную коллекцию к более общей.
    }
}
